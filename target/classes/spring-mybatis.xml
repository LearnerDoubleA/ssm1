<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 连接池 -->
    <bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method = "close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${jdbc.maxIdle}" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${jdbc.minIdle}" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${jdbc.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="connectionInitSqls">
            <list value-type="java.lang.String">
                <value>select getdate()</value>
            </list>
        </property>

        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。
        	如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用 -->
        <property name="validationQuery" value="select getdate()"/>

        <!-- 建议配置为true，不影响性能，并且保证安全性。
        	 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="true"/>

        <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
        <property name="testOnBorrow" value="false"/>

        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnReturn" value="false"/>

        <!--是否缓存preparedStatement，也就是PSCache。
        	PSCache对支持游标的数据库性能提升巨大，比如说oracle。
        	在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
        	作者在5.5版本中使用PSCache，通过监控界面发现PSCache有缓存命中率记录，该应该是支持PSCache。-->
        <property name="poolPreparedStatements" value="true"/>

        <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
        	在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100-->
        <property name="maxOpenPreparedStatements" value="100"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

        <!-- 属性类型是字符串，通过别名的方式配置扩展插件，
        	常用的插件有：
        	监控统计用的filter:stat
        	日志用的filter:log4j
        	防御sql注入的filter:wall -->
        <property name="filters" value="stat"/>

        <!-- 类型是List<com.alibaba.druid.filter.Filter>，
        	如果同时配置了filters和proxyFilters，是组合关系，并非替换关系 ref一系列过滤集合 -->
        <!--<property name="proxyFilters" ref="123"/>-->

        <!--直接关闭这个   自动回收超时连接-->
        <property name="removeAbandoned" value="true"/>

        <!-- 1800 秒，也就是 30 分钟 -->
        <property name="removeAbandonedTimeout" value="3600"/>

        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
    </bean>

    <!-- 结合Spring和Mybatis -->
    <bean id = "sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name = "mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class = "org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name = "basePackage" value="szh.dao" />
        <property name = "sqlSessionFactoryBeanName" value = "sqlSessionFactory" />
    </bean>

    <!-- 定义事务 -->
    <bean id = "transactionManager"
          class = "org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name = "dataSource" ref = "dataSource" />
    </bean>
    <!-- 使用注解定义事务 -->
    <tx:annotation-driven transaction-manager = "transactionManager" />


</beans>