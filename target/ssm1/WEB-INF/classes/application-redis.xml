<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.2.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
                        http://www.springframework.org/schema/cache
                        http://www.springframework.org/schema/cache/spring-cache-4.2.xsd">

    <!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
    <!--<cache:annotation-driven cache-manager="cacheManager" key-generator="myKeyGenerator" />-->

    <!-- jedis 配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--最大分配的链接数  -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!--最大空闲数 -->
        <property name="maxIdle" value="${redis.maxIdle}" />

        <!--最大建立连接等待时间 -->
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <!--配置文件加载 -->
    <bean id="resourcePropertySource" class="org.springframework.core.io.support.ResourcePropertySource">
        <constructor-arg name="name" value="redis.properties" />
        <constructor-arg name="resource" value="classpath:conf/redis.properties" />
    </bean>

    <!--redisCluster配置 -->
    <bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <constructor-arg name="propertySource" ref="resourcePropertySource" />
    </bean>

    <!-- redis服务器中心 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="clusterConfig" ref="redisClusterConfiguration" />
        <constructor-arg name="poolConfig" ref="poolConfig" />
        <property name="password" value="${redis.password}" />
        <property name="timeout" value="${redis.timeout}"></property>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！ -->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
    </bean>



    <!-- 自定义CacheManager，实现缓存有效期可配置 -->
    <!--<bean name="cacheManager" class="com.surf.core.cache.redis.ExtendedRedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate" />
        <constructor-arg name="cacheNames">
            <set>
                <value>default_cache</value>&lt;!&ndash; 默认缓存 &ndash;&gt;
                <value>data_dic_cache</value> &lt;!&ndash;数据字典缓存&ndash;&gt;
                <value>status_cache</value> &lt;!&ndash;状态字典缓存&ndash;&gt;

                <value>wchat_article_cache</value> &lt;!&ndash;微信 新闻 缓存&ndash;&gt;
                <value>wchat_course_cache</value> &lt;!&ndash;微信 课程 缓存&ndash;&gt;
                <value>wchat_user_msg_cache</value> &lt;!&ndash;微信 用户消息 缓存&ndash;&gt;

                <value>wen_gu_sms_cache_token</value> &lt;!&ndash;文谷的 短信 Cache token&ndash;&gt;
            </set>
        </constructor-arg>
        &lt;!&ndash; 默认缓存名字 &ndash;&gt;
        <property name="defaultCacheName" value="default_cache" />
        &lt;!&ndash; 是否在容器启动时初始化 &ndash;&gt;
        <property name="loadRemoteCachesOnStartup" value="true" />
        &lt;!&ndash; 是否使用前缀 &ndash;&gt;
        <property name="usePrefix" value="true" />
        &lt;!&ndash; 前缀命名，仅当usePrefix为true时才生效 &ndash;&gt;
        <property name="cachePrefix">
            <bean class="org.springframework.data.redis.cache.DefaultRedisCachePrefix">
                <constructor-arg name="delimiter" value="${redis_cachePrefix_delimiter}" />
            </bean>
        </property>
        &lt;!&ndash; 缓存名字和有效期的分隔符 &ndash;&gt;
        <property name="separator" value="#" />
        &lt;!&ndash; 默认有效期1h &ndash;&gt;
        <property name="defaultExpiration" value="2592000" />&lt;!&ndash; 30*24*3600 &ndash;&gt;
        &lt;!&ndash; 多个缓存有效期，一般的单个工程可以省略此项 &ndash;&gt;
        <property name="expires">
            <map>
                <entry key="data_dic_cache" value="604800"></entry>&lt;!&ndash;7*24*3600&ndash;&gt;
                <entry key="status_cache" value="604800"></entry>&lt;!&ndash;7*24*3600&ndash;&gt;

                <entry key="wchat_article_cache" value="30"></entry>&lt;!&ndash;30&ndash;&gt;
                <entry key="wchat_course_cache" value="30"></entry>&lt;!&ndash;30&ndash;&gt;
                <entry key="wchat_user_msg_cache" value="30"></entry>&lt;!&ndash;30&ndash;&gt;

                <entry key="wen_gu_sms_cache_token" value="72000"></entry>&lt;!&ndash;20*3600&ndash;&gt;
            </map>
        </property>
    </bean>-->
</beans>